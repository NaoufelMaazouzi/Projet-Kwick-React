{"version":3,"sources":["Components/navbar.js","ReactRouterRoutes/publicRoute.js","Components/aside.js","Components/messagesFromMe.js","Components/messagesFromPeople.js","Components/timeoutDialog.js","Components/typingBar.js","Components/messages.js","Context/auth.js","Components/signUp.js","ReactRouterRoutes/privateRoute.js","Components/login.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","token","id","history","useHistory","handleDeconnexion","a","Axios","get","process","then","data","result","status","Error","localStorage","clear","go","catch","e","className","to","onClick","PublicRoute","Component","component","rest","render","StyledBadge","withStyles","theme","badge","backgroundColor","color","boxShadow","palette","background","paper","position","top","left","width","height","borderRadius","animation","border","content","transform","opacity","Badge","Aside","setMessages","scrollToBottom","useState","usersConnected","setUsersConnected","valueOfSelect","setValueOfSelect","useEffect","user","fetchData","handleChangeTimestamp","target","value","Math","round","Date","talk","length","map","i","overlap","anchorOrigin","vertical","horizontal","variant","Avatar","alt","substring","FormControl","Select","labelId","onChange","MenuItem","MessagesFromMe","message","timestamp","toLocaleDateString","toLocaleTimeString","user_name","MessagesFromPeople","TimeoutDialog","open","setOpen","handleClose","push","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","TypingBar","formik","useFormik","initialValues","onSubmit","console","log","encodeURI","values","validate","errors","handleSubmit","touched","icon","faSearch","type","name","placeholder","handleChange","onBlur","handleBlur","Messages","username","messages","sessionTimeout","isTimedOut","setIsTimedOut","idleTimer","messagesEndRef","useRef","current","scrollIntoView","behavior","onAction","ref","element","document","onActive","onIdle","reset","debounce","timeout","key","Alert","severity","AuthContext","createContext","useAuth","useContext","email","test","password","SignUp","isError","setIsError","setAuthTokens","PrivateRoute","authTokens","Login","App","getItem","JSON","parse","Provider","authData","split","splice","toString","setItem","stringify","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.308b2f77.chunk.js","sourcesContent":["import '../css/navbar.css';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Axios from 'axios';\r\n\r\nfunction Navbar(props) {\r\n    const { token, id } = props;\r\n    let history = useHistory();\r\n\r\n    /*Function to handle the deconnexion & clear the localStorage*/\r\n    const handleDeconnexion = async () => {\r\n        await Axios.get(`${process.env.REACT_APP_API_URL}logout/${token}/${id}`)\r\n            .then(data => {\r\n                if (data.data.result.status === 'failure') {\r\n                    throw new Error();\r\n                }\r\n                localStorage.clear();\r\n                history.go(0);\r\n            })\r\n            .catch(e => {\r\n                /*console.log(e);*/\r\n            })\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <nav className=\"navMenu\">\r\n                    <ul className=\"navLinks\">\r\n                        {token ?\r\n                            <>\r\n                                <Link to='/' className=\"Link\">\r\n                                    <li id=\"messages\">Messages</li>\r\n                                </Link>\r\n                                <Link to='/login' onClick={handleDeconnexion} className=\"Link\">\r\n                                    Se déconnecter\r\n                                </Link>\r\n                            </> :\r\n                            <>\r\n                                <Link to='/signup' className=\"Link\">\r\n                                    <li>S'inscrire</li>\r\n                                </Link>\r\n                                <Link to='/login' className=\"Link\">\r\n                                    <li>Se connecter</li>\r\n                                </Link>\r\n                            </>\r\n                        }\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nfunction PublicRoute({ component: Component, ...rest }) {\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            <Component {...props} />\r\n        )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;","import '../css/aside.css';\r\nimport Axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport const StyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nfunction Aside(props) {\r\n    const { token, setMessages, scrollToBottom } = props;\r\n    const [usersConnected, setUsersConnected] = useState([]);\r\n    const [valueOfSelect, setValueOfSelect] = useState(0);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            await Axios.get(`${process.env.REACT_APP_API_URL}user/logged/${token}`)\r\n                .then(data => {\r\n                    if (data.data.result.status === 'failure') {\r\n                        throw new Error();\r\n                    }\r\n                    setUsersConnected(data.data.result.user);\r\n                })\r\n                .catch(e => {\r\n                    /*console.log(e);*/\r\n                })\r\n        }\r\n        fetchData();\r\n    }, [token]);\r\n\r\n    const handleChangeTimestamp = async (e) => {\r\n        setValueOfSelect(e.target.value);\r\n        await Axios.get(`${process.env.REACT_APP_API_URL}talk/list/${token}/${e.target.value === 0 ? 0 : Math.round((+new Date() / 1000) - e.target.value)}`)\r\n            .then(data => {\r\n                if (data.data.result.status === 'failure') {\r\n                    throw new Error();\r\n                }\r\n                setMessages(data.data.result.talk);\r\n                scrollToBottom();\r\n            })\r\n            .catch(e => {\r\n                /*console.log(e);*/\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <aside>\r\n            <section>\r\n                <h4>Personnes connectées</h4>\r\n                <ul className=\"connectesList\">\r\n                    <div className={usersConnected && usersConnected.length > 7 ? \"scrollDiv\" : null}>\r\n                        {usersConnected && usersConnected.map((user, i) => {\r\n                            return <li className=\"userBadge\" key={user}>\r\n                                <div>\r\n                                    <StyledBadge\r\n                                        overlap=\"circle\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right',\r\n                                        }}\r\n                                        variant=\"dot\"\r\n                                    >\r\n                                        <Avatar alt=\"Avatar\">{user !== null && user.substring(0, 1)}</Avatar>\r\n                                    </StyledBadge>\r\n                                </div>\r\n                                <div className=\"divTextPuce\">\r\n                                    <p className=\"textPuce\">{user}</p>\r\n                                </div>\r\n                            </li>\r\n                        })}\r\n                    </div>\r\n                    <div className=\"selectMessages\">\r\n                        <h4>Quels messages afficher ?</h4>\r\n                        <FormControl >\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={valueOfSelect}\r\n                                onChange={handleChangeTimestamp}\r\n                            >\r\n                                <MenuItem value={1 * 60}>Dernières 10min</MenuItem>\r\n                                <MenuItem value={12 * 60 * 60}>Dernières 12h</MenuItem>\r\n                                <MenuItem value={24 * 60 * 60}>Dernières 24h</MenuItem>\r\n                                <MenuItem value={48 * 60 * 60}>Dernières 48h</MenuItem>\r\n                                <MenuItem value={0}>Afficher tout</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                </ul>\r\n            </section>\r\n        </aside>\r\n    );\r\n}\r\n\r\nexport default Aside;\r\n","import '../css/messages.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nfunction MessagesFromMe(props) {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <>\r\n            {message &&\r\n                <div className=\"divMessages\" >\r\n                    <div className=\"myMessagesContainer\">\r\n                        <div className=\"myMessages\">\r\n                            <p className=\"contentMessage\">{message.content}</p>\r\n                        </div>\r\n                        <p className=\"date\">{new Date(message.timestamp * 1000).toLocaleDateString(\"fr-FR\")} à {new Date(message.timestamp * 1000).toLocaleTimeString(\"fr-FR\")}</p>\r\n                    </div>\r\n                    <div className=\"dateContainer\">\r\n                        <div>\r\n                            <Avatar alt=\"Avatar\">{message.user_name.substring(0, 1)}</Avatar>\r\n                            <p className=\"userName\">{message.user_name}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MessagesFromMe;\r\n","import '../css/messages.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nfunction MessagesFromPeople(props) {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <>\r\n            {message &&\r\n                <div className=\"divMessages\">\r\n                    <div className=\"divAvatar\">\r\n                        <div className=\"divAlignAvatar\">\r\n                            <Avatar alt=\"Avatar\">{message.user_name.substring(0, 1)}</Avatar>\r\n                        </div>\r\n                        <p className=\"userName\">{message.user_name}</p>\r\n                    </div>\r\n                    <div className=\"messageBubble\">\r\n                        <p className=\"contentMessage\">{message.content}</p>\r\n                    </div>\r\n                    <p className=\"dateFromPeople\">{new Date(message.timestamp * 1000).toLocaleDateString(\"fr-FR\")} à {new Date(message.timestamp * 1000).toLocaleTimeString(\"fr-FR\")}</p>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MessagesFromPeople;\r\n","import Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction TimeoutDialog(props) {\r\n    const { open, setOpen } = props;\r\n    let history = useHistory();\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        localStorage.clear();\r\n        history.go(0)\r\n        history.push(\"/login\");\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Vous êtes déconnécté\"}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    Vous avez été déconnecté dû à votre innactivité de plus de 20 minutes\r\n          </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Se reconnecter\r\n          </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default TimeoutDialog;\r\n\r\n\r\n\r\n\r\n\r\n","import '../css/messages.css';\r\nimport Axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { useFormik } from 'formik';\r\n\r\n\r\nfunction TypingBar(props) {\r\n    const { token, id, fetchData } = props;\r\n\r\n    /*Function to validate values*/\r\n    const validate = values => {\r\n        let errors = {};\r\n        if (values.message.length > 140) {\r\n            errors.message = \"Message trop long\";\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    /*Using react formik to simplify form handling*/\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        /*Get method to send message user when submiting form*/\r\n        onSubmit: async (e) => {\r\n            if (e.message.length > 140) {\r\n                console.log('ok');\r\n                return;\r\n            }\r\n            await Axios.get(`${process.env.REACT_APP_API_URL}say/${token}/${id}/${encodeURI(e.message)}`)\r\n                .then(async (data) => {\r\n                    if (data.data.result.status === 'failure') {\r\n                        throw new Error();\r\n                    }\r\n                    /*Fetch data when submiting message & reset value of message*/\r\n                    await fetchData();\r\n                    formik.values.message = '';\r\n                })\r\n                .catch(e => {\r\n                    /*console.log(e);*/\r\n                })\r\n        },\r\n        validate\r\n    })\r\n\r\n    return (\r\n        <div className=\"typingBar\">\r\n            <form onSubmit={formik.handleSubmit}>\r\n                {formik.touched.message && formik.errors.message &&\r\n                    <div className=\"errorMessage\">\r\n                        {formik.errors.message}\r\n                    </div>}\r\n                <div className=\"input-icons\">\r\n                    <FontAwesomeIcon className=\"searchIcon\" icon={faSearch} />\r\n                    <input\r\n                        type=\"text\"\r\n                        className={formik.errors.message ? \"redMessage\" : \"inputMessage\"}\r\n                        id=\"message\"\r\n                        name=\"message\"\r\n                        placeholder=\"Votre message...\"\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.message}\r\n                    />\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TypingBar;\r\n","import '../css/messages.css';\r\nimport Axios from 'axios';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport Aside from './aside';\r\nimport React from 'react';\r\nimport MessagesFromMe from './messagesFromMe';\r\nimport MessagesFromPeople from './messagesFromPeople';\r\nimport IdleTimer from 'react-idle-timer';\r\nimport TimeoutDialog from './timeoutDialog';\r\nimport TypingBar from './typingBar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nfunction Messages(props) {\r\n    /*Declare all states*/\r\n    const { token, username, id } = props;\r\n    const [messages, setMessages] = useState([]);\r\n    const [sessionTimeout] = useState(1000 * 1200 * 1);\r\n    const [isTimedOut, setIsTimedOut] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    let idleTimer = null;\r\n    const messagesEndRef = useRef(null);\r\n\r\n    /*Function to fetch all messages from the API*/\r\n    const fetchData = async () => {\r\n        await Axios.get(`${process.env.REACT_APP_API_URL}talk/list/${token}/0`)\r\n            .then(data => {\r\n                if (data.data.result.status === 'failure') {\r\n                    throw new Error();\r\n                }\r\n                setMessages(data.data.result.talk);\r\n                scrollToBottom();\r\n            })\r\n            .catch(e => {\r\n                /*console.log(e);*/\r\n            });\r\n    }\r\n\r\n    /*Function to scroll to bottom of chat*/\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    /*Fetch data when the component mount*/\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    /*Function to clear timeOut when user do an action on the page*/\r\n    const onAction = () => {\r\n        setIsTimedOut(false);\r\n    }\r\n\r\n    /*Function to open a pop-up if the user is inactive for 20min*/\r\n    const onIdle = () => {\r\n        if (isTimedOut) {\r\n            setOpen(true);\r\n        } else {\r\n            setOpen(false);\r\n            idleTimer.reset();\r\n            setIsTimedOut(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <IdleTimer\r\n                ref={ref => { idleTimer = ref }}\r\n                element={document}\r\n                onActive={onAction}\r\n                onIdle={onIdle}\r\n                onAction={onAction}\r\n                debounce={250}\r\n                timeout={sessionTimeout}\r\n            />\r\n            <TimeoutDialog open={open} setOpen={setOpen} />\r\n            <main>\r\n                <Aside token={token} setMessages={setMessages} scrollToBottom={scrollToBottom} />\r\n                <section className=\"sectionMessages\">\r\n                    <div className=\"messagesContainer\">\r\n\r\n                        {messages && messages.length ? messages.map((message, key) => {\r\n                            return message.user_name !== username ?\r\n                                <MessagesFromPeople message={message} key={key} />\r\n                                : <MessagesFromMe message={message} key={key} />\r\n                        }) :\r\n                            <Alert variant=\"outlined\" severity=\"error\">\r\n                                Aucun messages !\r\n                            </Alert>\r\n                        }\r\n                        <div ref={messagesEndRef} />\r\n                    </div>\r\n                    <TypingBar fetchData={fetchData} token={token} id={id} />\r\n                </section>\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Messages;\r\n","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}","import '../css/signUp.css';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport Axios from 'axios';\r\nimport { useAuth } from \"../Context/auth\";\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n/*Function to validate values from signup form*/\r\nconst validate = values => {\r\n    let errors = {};\r\n    if (!values.name) {\r\n        errors.name = \"Nom requis\";\r\n    }\r\n    if (!values.email) {\r\n        errors.email = \"Email requis\";\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = \"Format d'email invalide\"\r\n    }\r\n    if (!values.password) {\r\n        errors.password = \"Mot de passe requis\"\r\n    }\r\n    return errors;\r\n}\r\n\r\nfunction SignUp() {\r\n    /*Declare all states*/\r\n    const [isError, setIsError] = useState(false);\r\n    const { setAuthTokens } = useAuth();\r\n    let history = useHistory();\r\n\r\n    /*Using react formik to simplify form handling*/\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        /*Get method to signup user when submiting form*/\r\n        onSubmit: async (e) => {\r\n            await Axios.get(`${process.env.REACT_APP_API_URL}signup/${e.name}/${e.password}`)\r\n                .then(data => {\r\n                    if (data.data.result.status === 'failure') {\r\n                        setIsError(true);\r\n                        throw new Error();\r\n                    }\r\n                    /*Call the SetAuthTokens Function from App.js to set token, id & username of the user logged in localStorage*/\r\n                    setAuthTokens(data.data.result);\r\n                    history.push('/');\r\n                })\r\n                .catch(e => {\r\n                    /*console.log(e);*/\r\n                    setIsError(true)\r\n                })\r\n        },\r\n        validate\r\n    })\r\n\r\n    return (\r\n        <form className=\"formSignup\" onSubmit={formik.handleSubmit}>\r\n            {isError && <Alert severity=\"error\">Erreur de conexion. Veuillez choisir un autre nom et mot de passe</Alert>}\r\n            <h2 className='titleSignup'>S'inscrire</h2>\r\n            <div className=\"divInputSingup\">\r\n                <input\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    placeholder=\"Nom\"\r\n                    className=\"inputSignup\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.name} />\r\n                {formik.touched.name && formik.errors.name && <Alert severity=\"error\">{formik.errors.name}</Alert>}\r\n            </div>\r\n            <div className=\"divInputSingup\">\r\n                <input\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    className=\"inputSignup\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.email} />\r\n                {formik.touched.email && formik.errors.email && <Alert severity=\"error\">{formik.errors.email}</Alert>}\r\n            </div>\r\n            <div className=\"divInputSingup\">\r\n                <input\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Mot de passe\"\r\n                    className=\"inputSignup\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.password} />\r\n                {formik.touched.password && formik.errors.password && <Alert severity=\"error\">{formik.errors.password}</Alert>}\r\n            </div>\r\n            <p>\r\n                <input type=\"submit\" value=\"Créer mon compte\" id=\"submit\" />\r\n            </p>\r\n            <p>\r\n                <Link to='/login'>\r\n                    J'ai déjà un compte\r\n                </Link>\r\n            </p>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SignUp;","\r\nimport React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from \"../Context/auth\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    const { authTokens } = useAuth();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                authTokens ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                        <Redirect to=\"/login\" />\r\n                    )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;","import '../css/signUp.css';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport Axios from 'axios';\r\nimport { useAuth } from \"../Context/auth\";\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n/*Function to validate values from login form*/\r\nconst validate = values => {\r\n    let errors = {};\r\n\r\n    if (!values.name) {\r\n        errors.name = \"Nom requis\";\r\n    }\r\n    if (!values.password) {\r\n        errors.password = \"Mot de passe requis\"\r\n    }\r\n    return errors;\r\n}\r\n\r\nfunction Login() {\r\n    /*Declare all states*/\r\n    const [isError, setIsError] = useState(false);\r\n    const { setAuthTokens } = useAuth();\r\n    let history = useHistory();\r\n\r\n    /*Using react formik to simplify form handling*/\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        /*Get method to login user when submiting form*/\r\n        onSubmit: async (e) => {\r\n            await Axios.get(`${process.env.REACT_APP_API_URL}login/${e.name}/${e.password}`)\r\n                .then(data => {\r\n                    if (data.data.result.status === 'failure') {\r\n                        setIsError(true);\r\n                        throw new Error();\r\n                    }\r\n                    /*Call the SetAuthTokens function from App.js to set token, id & username of the user logged in localStorage*/\r\n                    setAuthTokens(data.data.result);\r\n                    history.push('/');\r\n                })\r\n                .catch(e => {\r\n                    /*console.log(e);*/\r\n                    setIsError(true);\r\n                })\r\n        },\r\n        validate\r\n    })\r\n\r\n    return (\r\n        <form className=\"formSignup\" onSubmit={formik.handleSubmit}>\r\n            {isError && <Alert severity=\"error\">Erreur de conexion. Mauvais nom ou mot de passe</Alert>}\r\n            <h2 className='titleSignup'>Se connecter</h2>\r\n            <div className=\"divInputSingup\">\r\n                <input\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    placeholder=\"Nom\"\r\n                    className=\"inputSignup\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.name} />\r\n                {formik.touched.name && formik.errors.name && <Alert severity=\"error\">{formik.errors.name}</Alert>}\r\n            </div>\r\n            <div className=\"divInputSingup\">\r\n                <input\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Mot de passe\"\r\n                    className=\"inputSignup\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.password} />\r\n                {formik.touched.password && formik.errors.password && <Alert severity=\"error\">{formik.errors.password}</Alert>}\r\n            </div>\r\n            <p>\r\n                <input type=\"submit\" value=\"Me connecter\" id=\"submit\" />\r\n            </p>\r\n            <p>\r\n                <Link to='/signup'>\r\n                    Je n'ai pas de compte\r\n                </Link>\r\n            </p>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Login;","import Navbar from './Components/navbar';\nimport PublicRoute from './ReactRouterRoutes/publicRoute';\nimport Messages from './Components/messages';\nimport SignUp from './Components/signUp';\nimport {\n  BrowserRouter as Router,\n  Switch,\n} from \"react-router-dom\";\nimport { AuthContext } from \"./Context/auth\";\nimport PrivateRoute from './ReactRouterRoutes/privateRoute';\nimport { useState } from 'react';\nimport Login from './Components/login';\n\n\nfunction App() {\n  /*Get localStorage*/\n  const existingLocalStorage = localStorage.getItem(process.env.REACT_APP_MY_LOCAL_STORAGE);\n  let token, id, username;\n  if (existingLocalStorage) {\n    /*Check if there are something in localStorage and get token, id & username from localStorage*/\n    ({ token, username, id } = JSON.parse(localStorage.getItem(process.env.REACT_APP_MY_LOCAL_STORAGE)));\n  }\n  const [authTokens, setAuthTokens] = useState(token);\n\n  /*Function to set token, id & username in localStorage*/\n  const setTokens = (data) => {\n    let authData =\n    {\n      \"token\": data.token,\n      \"id\": data.id,\n      \"username\": data.message.split(\" \").splice(-1).toString()\n    }\n    localStorage.setItem(process.env.REACT_APP_MY_LOCAL_STORAGE, JSON.stringify(authData));\n    setAuthTokens(data);\n  }\n\n  return (\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\n      <Router>\n        <div className=\"App\">\n          <Navbar token={token} id={id} />\n          <Switch>\n            <PrivateRoute exact path=\"/\" component={authTokens ? () => <Messages token={token} username={username} id={id} />\n              : Login} />\n            <PublicRoute path=\"/signup\" component={SignUp} />\n            <PublicRoute path=\"/login\" component={Login} />\n            <PublicRoute path=\"/:id\" component={Login} />\n          </Switch>\n        </div>\n      </Router >\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}